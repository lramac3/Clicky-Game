{"version":3,"sources":["components/Row.js","components/Col.js","components/Span.js","components/Header.js","components/Container.js","components/Paragraph.js","components/Game.js","App.js","index.js"],"names":["Row","props","react_default","a","createElement","className","concat","cls","children","Col","size","split","map","join","Span","Header","components_Row","components_Col","components_Span","message","score","highscore","Container","Paragraph","Game","state","allPictures","characters","pictures","slice","alreadyPicked","handleClick","id","len","_this","filter","idOfImage","length","newAlreadyPicked","newScore","setState","that","Object","assertThisInitialized","loop","newPictures","shuffle","newMessage","setTimeout","newHighScore","arr","i","j","Math","floor","random","x","_loop","v","_ret","this","_this2","components_Container","components_Paragraph","components_Header","pic","key","alt","name","src","image","onClick","React","Component","App","components_Game","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.bf4bce20.chunk.js","sourcesContent":["import React from 'react'\nimport './style.css'\n\nconst Row = props => (<div className={`row ${props.cls}`}>{props.children}</div>);\n\nexport default Row;\n","import React from 'react'\nimport './style.css'\n\nconst Col = props => {\n  const size = props.size\n    .split(' ')\n    .map(size => 'col-' + size)\n    .join(' ')\n  return <div className={`${size} text-center`}>{props.children}</div>\n}\n\nexport default Col;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Span = props => (<span className={props.cls}>{props.children}</span>);\n\nexport default Span;\n","import React from \"react\";\nimport Row from \"./Row\";\nimport Col from \"./Col\";\nimport Span from \"./Span\";\nimport \"./style.css\";\n\nconst Header = props => (\n  <Row cls=\"score\">\n    <Col size=\"md-4\">\n      <Span className=\"scoreboard\">ScoreBoard</Span>\n    </Col>\n    <Col size=\"md-4\">\n      <Span>{props.message}</Span>\n    </Col>\n    <Col size=\"md-4\">\n      <Span>\n        Score: {props.score} | Top Score: {props.highscore}\n      </Span>\n    </Col>\n  </Row>\n);\n\nexport default Header;\n","import React from 'react'\nimport './style.css'\n\nconst Container = props => (\n  <div className={`container ${props.cls}`}>{props.children}</div>\n)\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Paragraph = props => (<p>{props.children}</p>);\n\nexport default Paragraph;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport Row from \"./Row\";\nimport Col from \"./Col\";\nimport Container from \"./Container\";\nimport Span from \"./Span\";\nimport Paragraph from \"./Paragraph\";\nimport characters from \"../characters.json\";\nimport \"./style.css\";\n\nclass Game extends React.Component {\n  state = {\n    allPictures: characters, //contains the whole array of characters\n    pictures: characters.slice(0, 8), //contains only 8 pictures from characters array\n    score: 0, //has the score of the current game\n    highscore: 0, //has the highest score of the current session\n    message: \"Click to Start!\", //initial message for user\n    alreadyPicked: [], //contains ids of all images user has clicked in current game\n  };\n\n  //when components are mounted, shuffle allPictures array and set state.pictures as the result\n  //(which has first 8 images from the shuffled allPictures array)\n  componentDidMount() {\n    const newPictures = this.shuffle(this.state.allPictures);\n    this.setState({ pictures: newPictures });\n  }\n\n  //when user clicks on an image\n  handleClick = id => {\n    //filter alreadyPicked array to see if the clicked image's id exists in it or not\n    //if len===0, id does not exist in alreadyPicked array, else it exists\n    const len = this.state.alreadyPicked.filter(idOfImage => idOfImage === id)\n      .length;\n\n    //if len===0, clicked id will be added to alreadyPicked array, else alreadyPicked will become []\n    const newAlreadyPicked =\n      len === 0 ? this.state.alreadyPicked.concat(id) : [];\n\n    //if len===0, score of the current game will be incremented, else it becomes 0\n    const newScore = len === 0 ? this.state.score + 1 : 0;\n\n    //If there are still images left that are unclicked\n    if (newScore < this.state.allPictures.length) {\n      //set alreadyPicked array to newAlreadyPicked array initialize above\n      this.setState(\n        { alreadyPicked: newAlreadyPicked },\n        //callback\n        () => {\n          //new pointer to this\n          let that = this;\n          //function to check if the 8 images shown on the page at least has one image unclicked\n          (function loop() {\n            //newPictures contain 8 images after shuffling that has at least one unclicked image\n            let newPictures = that.shuffle(that.state.allPictures);\n            //loop if newPicture is empty i.e the 8 images picked after shuffling allPictures are all clicked\n            if (newPictures.length === 0) loop();\n            //if 8 images in newPictures has at least one unclicked image, set pictures array to newPictures\n            else that.setState({ pictures: newPictures });\n          })();\n        }\n      );\n\n      //if len===0, set the message to Guessed Correctly, else set it to Guessed Incorrectly\n      const newMessage =\n        len === 0 ? \"Guessed Correctly\" : \"Guessed Incorrectly\";\n      //pointer to this\n      const that = this;\n      //javascript function to show new message after 1 second if user loses\n      (function() {\n        if (newMessage === \"Guessed Incorrectly\") {\n          setTimeout(() => {\n            that.setState({ message: \"Click to start again!\" });\n          }, 1000);\n        }\n      })();\n\n      //if len===0, set the highScore to current score if current score is greater that highScore, else dont change the high score\n      const newHighScore =\n        len === 0\n          ? this.state.highscore < newScore\n            ? newScore\n            : this.state.highscore\n          : this.state.highscore;\n\n      //set message, score, highScore to variables initialzed above\n      this.setState({\n        message: newMessage,\n        score: newScore,\n        highscore: newHighScore,\n      });\n    }\n    //If user has clicked on all the images once i.e game won\n    else {\n      //pointer to this\n      const that = this;\n      //change the state.message to show game won message, update score and high score\n      that.setState({\n        message: \"You won!Game resetting..\",\n        score: that.state.score + 1,\n        highscore: that.state.highscore + 1,\n      });\n\n      //javascript function to reset the game after waiting for 2 seconds\n      (function() {\n        setTimeout(() => {\n          that.setState(\n            {\n              message: \"Click to Start!\",\n              score: 0,\n              allPictures: characters,\n              alreadyPicked: [],\n            },\n            () => {\n              //shuffle the pictures for the new game\n              const newPictures = that.shuffle(that.state.allPictures);\n              that.setState({ pictures: newPictures });\n            }\n          );\n        }, 2000);\n      })();\n    }\n  };\n\n  //method to shuffle the images\n  shuffle = arr => {\n    //shuffle allPictures array\n    for (let i = arr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const x = arr[i];\n      arr[i] = arr[j];\n      arr[j] = x;\n    }\n    //pick first 8 pictures and check if there is any image that does not exist in alreadyPicked array yet\n    for (let j = 0; j < 8; j++) {\n      const len = this.state.alreadyPicked.filter(id => id === arr[j].id)\n        .length;\n      //as soon as we found the first image among the 8 images picked, that does not exist in alreadyPicked array yet,\n      //return the first 8 images of the shuffled array of 16 images\n      if (len === 0) return arr.slice(0, 8);\n    }\n    //if all first 8 images in shuffled array exist in alreadyPicked array, return empty array\n    return [];\n  };\n\n  render() {\n    return (\n      <Container\n        cls={`${\n          this.state.message === \"Guessed Incorrectly\"\n            ? \"animated shake\"\n            : this.state.message === \"Click to Start!\"\n            ? \"animated fadeInUp\"\n            : this.state.message === \"You won!Game resetting..\"\n            ? \"animated flash\"\n            : \"\"\n        }`}\n      >\n        <Row cls=\"game-heading\">\n          <Col size=\"md-12\">\n            <Span cls=\"game-name\">CLICKY GAME</Span>\n            <Paragraph>\n              {\" \"}\n              Click on an image to earn points, but don't click on any more than\n              once!\n            </Paragraph>\n          </Col>\n        </Row>\n        <Header\n          message={this.state.message}\n          score={this.state.score}\n          highscore={this.state.highscore}\n        />\n        <Row cls=\"game-area\">\n          <Col size=\"md-1\" />\n          <Col size=\"md-10\">\n            {this.state.pictures.map(pic => (\n              <img\n                key={pic.id}\n                alt={pic.name}\n                src={pic.image}\n                onClick={() => this.handleClick(pic.id)}\n              />\n            ))}\n          </Col>\n          <Col size=\"md-1\" />\n        </Row>\n      </Container>\n    );\n  }\n}\nexport default Game;\n","// import React, { Component } from 'react';\nimport React from 'react';\nimport Game from './components/Game'\n\nconst App = () => (<Game />)\n\n\n// import logo from './logo.svg';\n// import './App.css';\n\n// class App extends Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}